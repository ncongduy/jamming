{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","term","setTerm","className","placeholder","value","onChange","event","target","onClick","onSearch","Track","addTrack","onAdd","track","removeTrack","onRemove","name","artist","album","isRemoval","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","accessToken","onNameChange","playList","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","namePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","setSearchResults","setPlayList","setName","find","trackPlayList","prev","filter","trackURIs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ace6bc7d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nfunction SearchBar(props) {\r\n  const [term, setTerm] = useState(\"\");\r\n\r\n  const search = () => {\r\n    props.onSearch(term);\r\n  };\r\n\r\n  const handleTermChange = (event) => {\r\n    setTerm(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"SearchBar\">\r\n      <input\r\n        placeholder=\"Enter A Song, Album, or Artist\"\r\n        value={term}\r\n        onChange={handleTermChange}\r\n      />\r\n      <button className=\"SearchButton\" onClick={search}>\r\n        SEARCH\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./Track.css\";\r\n\r\nfunction Track(props) {\r\n  const addTrack = () => {\r\n    props.onAdd(props.track);\r\n  };\r\n\r\n  const removeTrack = () => {\r\n    props.onRemove(props.track);\r\n  };\r\n\r\n  const renderAction = () => {\r\n    if (props.isRemoval) {\r\n      return <button onClick={removeTrack}>-</button>;\r\n    } else {\r\n      return <button onClick={addTrack}>+</button>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Track\">\r\n      <div className=\"Track-information\">\r\n        <h3>{props.track.name}</h3>\r\n        <p>\r\n          {props.track.artist} - {props.track.album}\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"Track-action\">{renderAction()}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Track;\r\n","import React from \"react\";\r\nimport \"./TrackList.css\";\r\nimport Track from \"../Track/Track\";\r\n\r\nfunction TrackList(props) {\r\n  return (\r\n    <div className=\"TrackList\">\r\n      {props.tracks.map((track) => {\r\n        return (\r\n          <Track\r\n            track={track}\r\n            key={track.id}\r\n            onAdd={props.onAdd}\r\n            isRemoval={props.isRemoval}\r\n            onRemove={props.onRemove}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TrackList;\r\n","import React from \"react\";\r\nimport \"./SearchResults.css\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nfunction SearchResults(props) {\r\n  return (\r\n    <div className=\"SearchResults\">\r\n      <h2>Results</h2>\r\n      <TrackList\r\n        tracks={props.searchResults}\r\n        isRemoval={false}\r\n        onAdd={props.onAdd}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from \"react\";\r\nimport \"./Playlist.css\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nfunction Playlist(props) {\r\n  const handleNameChange = (event) => {\r\n    props.onNameChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Playlist\">\r\n      <input value={props.name} onChange={handleNameChange} />\r\n      <TrackList\r\n        tracks={props.playList}\r\n        isRemoval={true}\r\n        onRemove={props.onRemove}\r\n      />\r\n      <button className=\"Playlist-save\" onClick={props.onSave}>\r\n        SAVE TO SPOTIFY\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Playlist;\r\n","const clientID = \"fe3266c53cda4443b89281eb104c8dd4\";\r\nconst redirectUri = \"https://ncongduy.github.io/jamming/\";\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    //check for access token match\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      //This clears the parameters, allowing us to grab a new access token when it expires.\r\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\");\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        }\r\n        return jsonResponse.tracks.items.map((track) => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artists: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri,\r\n        }));\r\n      });\r\n  },\r\n\r\n  savePlaylist(namePlaylist, trackUris) {\r\n    if (!namePlaylist || !trackUris.length) {\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n\r\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: \"POST\",\r\n          body: JSON.stringify({ name: namePlaylist }),\r\n        });\r\n      })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        const playlistId = jsonResponse.id;\r\n        return fetch(\r\n          `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\r\n          {\r\n            headers: headers,\r\n            method: \"POST\",\r\n            body: JSON.stringify({ uris: trackUris }),\r\n          }\r\n        );\r\n      });\r\n  },\r\n};\r\n\r\nexport default Spotify;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport SearchResults from \"../SearchResults/SearchResults\";\r\nimport Playlist from \"../Playlist/Playlist\";\r\nimport Spotify from \"../../util/Spotify\";\r\n\r\nfunction App(props) {\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  const [playList, setPlayList] = useState([]);\r\n\r\n  const [name, setName] = useState(\"New Playlist\");\r\n\r\n  const addTrack = (track) => {\r\n    if (playList.find((trackPlayList) => trackPlayList.id === track.id)) {\r\n      return;\r\n    } else {\r\n      setPlayList((prev) => [track, ...prev]);\r\n    }\r\n  };\r\n\r\n  const removeTrack = (track) => {\r\n    setPlayList(\r\n      playList.filter((trackPlayList) => trackPlayList.id !== track.id)\r\n    );\r\n  };\r\n\r\n  const updatePlaylistName = (name) => {\r\n    setName(name);\r\n  };\r\n\r\n  const savePlaylist = () => {\r\n    const trackURIs = playList.map((track) => track.uri);\r\n    Spotify.savePlaylist(name, trackURIs).then(() => {\r\n      setName(\"New Playlist\");\r\n      setPlayList([]);\r\n    });\r\n  };\r\n\r\n  const search = (term) => {\r\n    Spotify.search(term).then((response) => setSearchResults(response));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Ja<span className=\"highlight\">mmm</span>ing\r\n      </h1>\r\n      <div className=\"App\">\r\n        <SearchBar onSearch={search} />\r\n        <div className=\"App-playlist\">\r\n          <SearchResults searchResults={searchResults} onAdd={addTrack} />\r\n          <Playlist\r\n            playList={playList}\r\n            onRemove={removeTrack}\r\n            name={name}\r\n            onNameChange={updatePlaylistName}\r\n            onSave={savePlaylist}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}